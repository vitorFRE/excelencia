// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @db.Text

  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]

  role UserRole @default(USER)

  favorites    Favorite[]
  properties Property[]
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

model Favorite {
  id String @id @default(cuid())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  property  Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String

  @@unique([user_id, propertyId])
}

model Property {
  id        String   @id @default(cuid())
  title     String
  description String @db.VarChar(600)
  price     Int
  area Float
  buildingArea Float
  bedroomCount    Int
  bathroomCount   Int
  city String
  state String
  roomCount Int
  locationValue String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  latitude    Float         
  longitude Float


  images      PropertyImage[]
  favorites Favorite[]

  owner      User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String
}

model PropertyImage {
  id        String   @id @default(cuid())

  property  Property @relation(fields: [propertyId], references: [id], onDelete: Cascade) 
  propertyId String

  imageUrl  String
  imageId String

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@unique([propertyId, imageUrl])
}